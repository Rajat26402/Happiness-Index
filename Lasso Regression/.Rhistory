train<-read.csv("D:/VIT/5th Semester/FDA/Review 3/Lasso Regression/2016_withNA.csv")
test<-read.csv("2017_withNA.csv")
# Omiting NA values
train<-na.omit(train)
nrow(train)
test<-na.omit(test)
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(5,6,7,8,9,10,11,12,13)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(4,5,6,7,8,9,10,11,12)])
best_model<-glmnet(X,Y,alpha = 1,lambda = best_lambda)
coef(best_model)
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
# Loading Data
train<-read.csv("D:/VIT/5th Semester/FDA/Review 3/Lasso Regression/2016_withNA.csv")
test<-read.csv("2017_withNA.csv")
# Omiting NA values
train<-na.omit(train)
nrow(train)
test<-na.omit(test)
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(5,6,7,8,9,10,11,12,13)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(4,5,6,7,8,9,10,11,12)])
best_model<-glmnet(X,Y,alpha = 1,lambda = best_lambda)
coef(best_model)
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
setwd("D:/VIT/5th Semester/FDA/Review 3/Lasso Regression")
# Loading Data
train<-read.csv("2016_new.csv")
test<-read.csv("2017_new.csv")
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(6,7,8,9,10,11,12,13,14)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(5,6,7,8,9,10,11,12,13)])
best_model<-glmnet(X,Y,alpha = 1,lambda = best_lambda)
coef(best_model)
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
# Loading Data
train<-read.csv("2016_withNA.csv")
test<-read.csv("2017_withNA.csv")
# Omiting NA values
train<-na.omit(train)
nrow(train)
test<-na.omit(test)
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(5,6,7,8,9,10,11,12,13)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(4,5,6,7,8,9,10,11,12)])
best_model<-glmnet(X,Y,alpha = 1,lambda = best_lambda)
coef(best_model)
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
# Loading Data
train<-read.csv("2016_new.csv")
test<-read.csv("2017_new.csv")
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(6,7,8,9,10,11,12,13,14)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(5,6,7,8,9,10,11,12,13)])
best_model<-glmnet(X,Y,alpha = 1,lambda = best_lambda)
coef(best_model)
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
df=read.csv("2016_withNA.csv")
df=subset(df,select= -c(Country,Region,Happiness.Rank,Year))
df<-na.omit(df)
colnames(df)
str(df)
model <- lm(Happiness.Score~Lower.Confidence.Interval+Upper.Confidence.Interval+Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity+Dystopia.Residual, data = df)
print(model)
cat("# # # # The Coefficient Values # # # ","\n")
a <- coef(model)[1]
print(a)
for( i in 2:length(coef(model))){
print(coef(model)[i])
}
df=read.csv("2017_withNA.csv")
df=subset(df,select= -c(Country,Happiness.Rank,Year))
df<-na.omit(df)
colnames(df)
X=subset(df,select = -c(Happiness.Score))
Y=subset(df,select = c(Happiness.Score))
Yp=c()
sum=0
for(i in 1:dim(X)[1]){
sum=coef(model)[1]
for( j in 2:length(coef(model))){
sum=sum+coef(model)[j]*X[i,j-1]
}
Yp=c(Yp,sum)
}
Yp=data.frame(Happiness.Score.predict=Yp)
str(Y)
str(Yp)
error=(sum(abs(Yp-Y)))/sum(Y)*100
accuracy=100-error
print(paste("Error: ",error,"%"))
print(paste("Accuracy: ",accuracy,"%"))
write.csv(cbind(Y,Yp),"Y_vs_YPredictedwithNA.csv")
#Preprocessed
df=read.csv("2016_new.csv")
df=subset(df,select= -c(Country,Region,Happiness.Rank,Happiness.Rank.1,Year))
colnames(df)
str(df)
model <- lm(Happiness.Score~Lower.Confidence.Interval+Upper.Confidence.Interval+Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity+Dystopia.Residual, data = df)
print(model)
cat("# # # # The Coefficient Values # # # ","\n")
a <- coef(model)[1]
print(a)
for( i in 2:length(coef(model))){
print(coef(model)[i])
}
df=read.csv("2017_new.csv")
df=subset(df,select= -c(Country,Happiness.Rank,Happiness.Rank.1,Year))
colnames(df)
X=subset(df,select = -c(Happiness.Score))
Y=subset(df,select = c(Happiness.Score))
Yp=c()
sum=0
for(i in 1:dim(X)[1]){
sum=coef(model)[1]
for( j in 2:length(coef(model))){
sum=sum+coef(model)[j]*X[i,j-1]
}
Yp=c(Yp,sum)
}
Yp=data.frame(Happiness.Score.predict=Yp)
str(Y)
str(Yp)
error=(sum(Yp-Y))/sum(Y)*100
accuracy=100-error
print(accuracy)
write.csv(cbind(Y,Yp),"Y_vs_YPredicted.csv")
# Loading Data
train<-read.csv("2016_new.csv")
test<-read.csv("2017_new.csv")
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(6,7,8,9,10,11,12,13,14)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(5,6,7,8,9,10,11,12,13)])
best_model<-glmnet(X,Y,alpha = 1,lambda = best_lambda)
coef(best_model)
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
head(test,5)
# Loading Data
train<-read.csv("2016_withNA.csv")
test<-read.csv("2017_withNA.csv")
# Omiting NA values
train<-na.omit(train)
nrow(train)
test<-na.omit(test)
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(5,6,7,8,9,10,11,12,13)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(4,5,6,7,8,9,10,11,12)])
best_model<-glmnet(X,Y,alpha = 1,lambda = best_lambda)
coef(best_model)
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
# Loading Data
train<-read.csv("2016_withNA.csv")
test<-read.csv("2017_withNA.csv")
# Omiting NA values
train<-na.omit(train)
nrow(train)
test<-na.omit(test)
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(5,6,7,8,9,10,11,12,13)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(4,5,6,7,8,9,10,11,12)])
best_model<-glmnet(X,Y,alpha = 1,lambda = best_lambda)
coef(best_model)
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
# Loading Data
train<-read.csv("2016_new.csv")
test<-read.csv("2017_new.csv")
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(6,7,8,9,10,11,12,13,14)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(5,6,7,8,9,10,11,12,13)])
best_model<-glmnet(X,Y,alpha = 1,lambda = best_lambda)
coef(best_model)
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
# Loading Data
train<-read.csv("2016_withNA.csv")
test<-read.csv("2017_withNA.csv")
# Omitting NA values
train<-na.omit(train)
nrow(train)
test<-na.omit(test)
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(5,6,7,8,9,10,11,12,13)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(4,5,6,7,8,9,10,11,12)])
best_model<-glmnet(X,Y,alpha = 1,lambda = best_lambda)
coef(best_model)
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
df=read.csv("2016_withNA.csv")
df=subset(df,select= -c(Country,Region,Happiness.Rank,Year))
df<-na.omit(df)
colnames(df)
str(df)
model <- lm(Happiness.Score~Lower.Confidence.Interval+Upper.Confidence.Interval+Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity+Dystopia.Residual, data = df)
print(model)
cat("# # # # The Coefficient Values # # # ","\n")
a <- coef(model)[1]
print(a)
for( i in 2:length(coef(model))){
print(coef(model)[i])
}
df=read.csv("2017_withNA.csv")
df=subset(df,select= -c(Country,Happiness.Rank,Year))
df<-na.omit(df)
colnames(df)
X=subset(df,select = -c(Happiness.Score))
Y=subset(df,select = c(Happiness.Score))
Yp=c()
sum=0
for(i in 1:dim(X)[1]){
sum=coef(model)[1]
for( j in 2:length(coef(model))){
sum=sum+coef(model)[j]*X[i,j-1]
}
Yp=c(Yp,sum)
}
Yp=data.frame(Happiness.Score.predict=Yp)
str(Y)
str(Yp)
error=(sum(abs(Yp-Y)))/sum(Y)*100
accuracy=100-error
print(paste("Error: ",error,"%"))
print(paste("Accuracy: ",accuracy,"%"))
write.csv(cbind(Y,Yp),"Y_vs_YPredictedwithNA.csv")
#Preprocessed
df=read.csv("2016_new.csv")
df=subset(df,select= -c(Country,Region,Happiness.Rank,Happiness.Rank.1,Year))
colnames(df)
str(df)
model <- lm(Happiness.Score~Lower.Confidence.Interval+Upper.Confidence.Interval+Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity+Dystopia.Residual, data = df)
print(model)
cat("# # # # The Coefficient Values # # # ","\n")
a <- coef(model)[1]
print(a)
for( i in 2:length(coef(model))){
print(coef(model)[i])
}
df=read.csv("2017_new.csv")
df=subset(df,select= -c(Country,Happiness.Rank,Happiness.Rank.1,Year))
colnames(df)
X=subset(df,select = -c(Happiness.Score))
Y=subset(df,select = c(Happiness.Score))
Yp=c()
sum=0
for(i in 1:dim(X)[1]){
sum=coef(model)[1]
for( j in 2:length(coef(model))){
sum=sum+coef(model)[j]*X[i,j-1]
}
Yp=c(Yp,sum)
}
Yp=data.frame(Happiness.Score.predict=Yp)
str(Y)
str(Yp)
error=(sum(Yp-Y))/sum(Y)*100
accuracy=100-error
print(accuracy)
write.csv(cbind(Y,Yp),"Y_vs_YPredicted.csv")
setwd("D:/VIT/5th Semester/FDA/Review 3/Lasso Regression")
# Loading Data
train<-read.csv("2016_new.csv")
test<-read.csv("2017_new.csv")
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(6,7,8,9,10,11,12,13,14)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
#Finding Model
best_model<-glmnet(x,y,alpha = 1,lambda = best_lambda)
coef(best_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(5,6,7,8,9,10,11,12,13)])
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
acc = rsq * 100
acc
# Loading Data
train<-read.csv("2016_withNA.csv")
test<-read.csv("2017_withNA.csv")
# Omitting NA values
train<-na.omit(train)
nrow(train)
test<-na.omit(test)
# Viewing data
head(train,5)
head(test,5)
# Dividing columns into y and x of training data.
y<-train$Happiness.Score
x<-data.matrix(train[,c(5,6,7,8,9,10,11,12,13)])
# Loading Library
library(glmnet)
# Modeling using training.
cv_model<-cv.glmnet(x,y,alpha=1)
best_lambda<-cv_model$lambda.min
best_lambda
# Ploting the Model
plot(cv_model)
#Finding Model
best_model<-glmnet(x,y,alpha = 1,lambda = best_lambda)
coef(best_model)
# Predicting data for testing data
Y<-test$Happiness.Score
X<-data.matrix(test[,c(4,5,6,7,8,9,10,11,12)])
y_predicted<-predict(best_model,s=best_lambda,newx = X)
# Finding Accuracy
sst<-sum((Y-mean(Y))^2)
sse<-sum((y_predicted-Y)^2)
rsq<-1-sse/sst
rsq
acc = rsq * 100
acc
